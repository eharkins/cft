[
    {
        "cft.dataset.db:ident": [
            "221174ed-37cc-3c53-9744-0c19ed565b28"
        ], 
        "cft.dataset:samples": null, 
        "cft.dataset:outdir": "output/test-input", 
        "cft.dataset:id": "test-input-2018.07.30", 
        "cft.dataset:build": {
            "cft.build:diff": "diff --git a/SConstruct b/SConstruct\nindex db276e2..0f06c1a 100644\n--- a/SConstruct\n+++ b/SConstruct\n@@ -35,6 +35,7 @@ import yaml\n import json\n import re\n import functools as fun\n+import traceback\n \n from os import path\n from warnings import warn\n@@ -327,23 +328,15 @@ def valid_seed_partition(cp, part, best_plus_i, seed_id):\n \n # Try to read partition file; If fails, it is possibly because it's empty. Catch that case and warn\n def read_partition_file(filename):\n-    cp = clusterpath.ClusterPath()\n     try:\n-        cp.readfile(filename)\n-    except Exception as e:\n-        warn(\"Unable to parse partition file (ommitting from results): {}\".format(filename))\n-        try:\n-            with open(filename) as fh:\n-                contents = fh.read()\n-                if contents == '':\n-                    warn(\"  Explanation: Empty partition file\")\n-                else:\n-                    warn(\"  Nonempty partition file failed to parse\")\n-        except Exception:\n-            warn(\"  Explanation: Can't open file; missing file? Poorly formatted?\")\n-            warn(\"  Exception: \" + str(e))\n+        _, _, cpath = utils.read_output(filename, skip_annotations=True)\n+    except:\n+        exc_type, exc_value, exc_traceback = sys.exc_info()\n+        lines = traceback.format_exception(exc_type, exc_value, exc_traceback)\n+        print(utils.pad_lines(''.join(lines)))\n+        warn(\"Unable to parse partition file (see error above, ommitting from results): {}\".format(filename))\n         return []\n-    return cp\n+    return cpath\n \n # note we elide the nested partitions > clusters lists so as not to kill tripl when it tries to load them as a\n # value and can't hash\ndiff --git a/partis b/partis\nindex e709924..00421b4 160000\n--- a/partis\n+++ b/partis\n@@ -1 +1 @@\n-Subproject commit e709924ef9c28bdd4ea49e50d4b8a2fc51a22c32\n+Subproject commit 00421b4158455e924d0a610ca0015c22465f4681\ndiff --git a/test.yaml b/test.yaml\nindex 005ad2d..91e0f6a 100644\n--- a/test.yaml\n+++ b/test.yaml\n@@ -8,15 +8,15 @@ samples:\n     per-sequence-meta-file: \n \n     # Unseeded partitions go here\n-    # partition-file: tests/partition-ref-simu.yaml  # new partition + annotation + glfo format (SConstruct can't handle this yet)\n-    partition-file: tests/partition.csv\n+    partition-file: tests/partition.yaml  # new partition + annotation + glfo format\n+    # partition-file: tests/partition.csv\n \n     # seed partition runs should be organized under a `seeds` key as follows\n     seeds:\n       # seed sequence id\n       '-1118600317502690934':\n-        # partition-file: tests/partition-ref-simu.yaml  # new partition + annotation + glfo format (SConstruct can't handle this yet)\n-        partition-file: tests/seed-partition.csv\n+        partition-file: tests/seed-partition.yaml  # new partition + annotation + glfo format\n+        # partition-file: tests/seed-partition.csv\n       # other seeds, as applicable...\n \n   # another sample in our dataset...\n", 
            "cft.build:software": [
                {
                    "cft.software:name": "biopython", 
                    "cft.software:version": "1.66", 
                    "cft.software:which": null
                }, 
                {
                    "cft.software:name": "FastTree", 
                    "cft.software:version": null, 
                    "cft.software:which": "/home/dralph/bin/FastTree\n"
                }, 
                {
                    "cft.software:name": "prank", 
                    "cft.software:version": null, 
                    "cft.software:which": "/usr/bin/prank\n"
                }, 
                {
                    "cft.software:name": "dnaml", 
                    "cft.software:version": null, 
                    "cft.software:which": "/home/dralph/anaconda_ete/envs/cft/bin/dnaml\n"
                }, 
                {
                    "cft.software:name": "tripl", 
                    "cft.software:version": "0.0.1", 
                    "cft.software:which": null
                }, 
                {
                    "cft.software:name": "ete3", 
                    "cft.software:version": "3.1.1", 
                    "cft.software:which": null
                }, 
                {
                    "cft.software:name": "rppr", 
                    "cft.software:version": null, 
                    "cft.software:which": "/home/dralph/bin/rppr\n"
                }, 
                {
                    "cft.software:name": "scons", 
                    "cft.software:version": null, 
                    "cft.software:which": "/home/dralph/anaconda_ete/envs/cft/bin/scons\n"
                }, 
                {
                    "cft.software:name": "dendropy", 
                    "cft.software:version": "4.4.0", 
                    "cft.software:which": null
                }, 
                {
                    "cft.software:name": "seqmagick", 
                    "cft.software:version": null, 
                    "cft.software:which": "/home/dralph/.local/bin/seqmagick\n"
                }, 
                {
                    "cft.software:name": "muscle", 
                    "cft.software:version": null, 
                    "cft.software:which": "/usr/bin/muscle\n"
                }
            ], 
            "cft.build:commit": "c37cbbb03c34dab776522a525d43a9fc4963d1ee\n", 
            "cft.build:status": " M SConstruct\n M partis\n M test.yaml\n?? init.sh\n?? output.bak/\n", 
            "cft.build:command": "/home/dralph/anaconda_ete/envs/cft/bin/scons", 
            "cft.build:user": "dralph", 
            "cft.build:id": "cft-build-2018-07-30-18:01:42", 
            "cft.build:workdir": "/home/dralph/work/cft", 
            "cft.build:time": "2018-07-30 18:01:42", 
            "tripl:type": "cft.build", 
            "db:ident": [
                "498ed22e-945d-11e8-b0c0-abaeb67820c1"
            ], 
            "cft.build.db:ident": [
                "498ed22e-945d-11e8-b0c0-abaeb67820c1"
            ]
        }, 
        "tripl.nestly:aggregate": [], 
        "cft.dataset:label": "test-input", 
        "cft.dataset:metadata_snapshot": [
            {
                "tripl.file:sources": [
                    {
                        "tripl.file:path": "metadata.json"
                    }
                ], 
                "db:ident": [
                    "51149f11-9c21-3196-ab57-da6069a4b939"
                ], 
                "tripl.file:path": "2018-07-30-metadata.json"
            }
        ], 
        "tripl:type": "cft.dataset", 
        "db:ident": [
            "221174ed-37cc-3c53-9744-0c19ed565b28"
        ]
    }
]