#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Read a PHYLIP-format file and produce an appropriate config file for passing to `dnaml`.

`dnaml` is an rather old program that doesn't play very well in a
pipeline.  It prompts the user for configuration information and reads
responses from stdin.  The config file generated by this script is
meant to mimic the responses to the expected prompts.

Typical usage is,

     $ mkconfig.py sequence.phy >dnaml.cfg
     $ dnaml <dnaml.cfg

For reference, the dnaml configuration prompt looks like this:

    Settings for this run:
      U                 Search for best tree?  Yes
      T        Transition/transversion ratio:  2.0000
      F       Use empirical base frequencies?  Yes
      C                One category of sites?  Yes
      R           Rate variation among sites?  constant rate
      W                       Sites weighted?  No
      S        Speedier but rougher analysis?  Yes
      G                Global rearrangements?  No
      J   Randomize input order of sequences?  No. Use input order
      O                        Outgroup root?  No, use as outgroup species  1
      M           Analyze multiple data sets?  No
      I          Input sequences interleaved?  Yes
      0   Terminal type (IBM PC, ANSI, none)?  ANSI
      1    Print out the data at start of run  No
      2  Print indications of progress of run  Yes
      3                        Print out tree  Yes
      4       Write out trees onto tree file?  Yes
      5   Reconstruct hypothetical sequences?  No

      Y to accept these or type the letter for one to change

"""
import re
import os
import argparse
from warnings import warn

def extract_naive(file):
    with open( file, 'r' ) as fh:
        for lineno,line in enumerate(fh):
            if re.match(".*naive.*", line):
                return lineno


def main():

    def existing_file(fname):
        """
        Argparse type for an existing file
        """
        if not os.path.isfile(fname):
            raise ValueError("Invalid file: " + str(fname))
        return fname

    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument('phylip', nargs=1, help='PHYLIP input', type=existing_file)
    a = parser.parse_args()

    naive = extract_naive(a.phylip[0])
    print("{}".format(os.path.basename(a.phylip[0])))		# phylip input file
    if naive:
        print("O")						# Outgroup root
        print("{}".format(naive))		# naive index in phylip
    else:
        warn("No naÃ¯ve sequence found!")
    print("5")						# Reconstruct hypothetical sequences
    print("Y")						# accept these

    
if __name__ == "__main__":
   main()
   
